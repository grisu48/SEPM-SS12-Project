/**
 * File: SqlPersistenceTest.java
 * Date: 06.06.2012
 */
package org.smartsnip.persistence.hibernate;

import static org.junit.Assert.*;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import javax.validation.Validation;
import javax.validation.Validator;
import javax.validation.ValidatorFactory;

import org.apache.log4j.Level;
import org.apache.log4j.LogManager;
import org.apache.log4j.Logger;
import org.junit.AfterClass;
import org.junit.BeforeClass;
import org.junit.Ignore;
import org.junit.Test;
import org.smartsnip.core.Category;
import org.smartsnip.core.Code;
import org.smartsnip.core.Comment;
import org.smartsnip.core.Notification;
import org.smartsnip.core.Snippet;
import org.smartsnip.core.Tag;
import org.smartsnip.core.User;
import org.smartsnip.core.User.UserState;
import org.smartsnip.persistence.IPersistence;
import org.smartsnip.persistence.PersistenceFactory;
import org.smartsnip.security.MD5;

/**
 * The SqlPersistence under test.
 * 
 * @author littlelion
 * 
 */
public class SqlPersistenceTest {

	private static IPersistence instance;
	private static SqlPersistenceHelper helper;
	private static Validator validator;
	private static Logger log = Logger.getLogger(SqlPersistenceImplTest.class);

	private static Snippet test_snip1;
	private static Snippet test_snip2;

	/**
	 * set up the database connection before unit tests
	 * 
	 * @throws java.lang.Exception
	 */
	@BeforeClass
	public static void setUpBeforeClass() throws Exception {
		// change the log level
		LogManager.getRootLogger().setLevel(Level.ALL);
		log.info("SqlPersistence test cases - begin tests");
		log.info("changed LOG-Level to ALL");
		System.out.println("See log file for detailed debug messages.");
		System.out.println();

		// get a bean validator instance
		ValidatorFactory factory = Validation.buildDefaultValidatorFactory();
		validator = factory.getValidator();

		String dbConfig = "/hibernate.cfg.local_db.xml"; // the config file

		log.info("Use local database defined in " + dbConfig);
		PersistenceFactory.closeFactory();
		PersistenceFactory.setDefaultType(PersistenceFactory.PERSIST_SQL_DB);
		DBSessionFactory.getInstance(dbConfig);
		instance = PersistenceFactory.getInstance();
		assertTrue(
				"persistence type not PERSIST_SQL_DB",
				PersistenceFactory.getPersistenceType() == PersistenceFactory.PERSIST_SQL_DB);

		// mass index the database
		Maintainance.fullTextMassIndexer();

		// get a helper to create some core objects
		helper = new SqlPersistenceHelper();

		// write some objects into the DB
		log.trace("Preparing some persistent test objects");
		User user1 = helper.createUser("_test_user_1", "a test user",
				"one@test.org", UserState.unvalidated, new Date());
		User user2 = helper.createUser("_test_user_2", "another test user",
				"two@test.org", UserState.validated, new Date());
		User user3 = helper.createUser("_test_user_3", "third test user",
				"three@test.org", UserState.validated, new Date());
		instance.writeUser(user1, IPersistence.DB_DEFAULT);
		instance.writeUser(user2, IPersistence.DB_DEFAULT);
		instance.writeUser(user3, IPersistence.DB_DEFAULT);

		instance.writeLogin(user1, MD5.md5("_test_pass"), true,
				IPersistence.DB_DEFAULT);
		instance.writeLogin(user2, MD5.md5("_test_login"), false,
				IPersistence.DB_DEFAULT);
		instance.writeLogin(user3, MD5.md5("_test_code"), true,
				IPersistence.DB_DEFAULT);

		Category par = helper.createCategory("_test_root",
				"a test category as root", null);
		Category cat = helper.createCategory("_test_sub",
				"another test category", "_test_root");
		instance.writeCategory(par, IPersistence.DB_DEFAULT);
		instance.writeCategory(cat, IPersistence.DB_DEFAULT);

		instance.writeLanguage("_test_java", "java", true,
				IPersistence.DB_DEFAULT);
		instance.writeLanguage("_test_c", "c", true, IPersistence.DB_DEFAULT);
		instance.writeLanguage("_test_sql", "sql", false,
				IPersistence.DB_DEFAULT);

		instance.writeLicense(
				"_test_license",
				"This is a test license file. It is generated by the SqlPersistence unit test",
				IPersistence.DB_DEFAULT);

		List<Tag> tags1 = new ArrayList<Tag>();
		tags1.add(helper.createTag("_test_one"));
		tags1.add(helper.createTag("_test_two"));
		tags1.add(helper.createTag("_test_three"));
		tags1.add(helper.createTag("_test_four"));
		tags1.add(helper.createTag("_test_five"));

		Snippet snip1 = helper.createSnippet(1L, user1.getUsername(),
				"_test_snippet_1", "this is a snippet", par.getName(), tags1,
				null, "_test_license", 0, 0F);
		Long snipId1 = instance.writeSnippet(snip1, IPersistence.DB_DEFAULT);
		snip1.id = snipId1; // fetch the generated snippet id from the database

		tags1.remove(2);
		tags1.remove(0);
		tags1.add(helper.createTag("_test_one_more"));
		tags1.add(helper.createTag("_test_another_one"));

		Snippet snip2 = helper.createSnippet(2L, user1.getUsername(),
				"_test_snippet_2", "this is another snippet", cat.getName(), tags1,
				null, "_test_license", 0, 0F);
		Long snipId2 = instance.writeSnippet(snip2, IPersistence.DB_DEFAULT);
		snip2.id = snipId2;

		List<Tag> tags2 = new ArrayList<Tag>();
		tags2.add(helper.createTag("_test_something"));
		
		Snippet snip3 = helper.createSnippet(3L, user2.getUsername(),
				"_test_snippet_3", "this is a third snippet", par.getName(), tags2,
				null, "_test_license", 0, 0F);
		Long snipId3 = instance.writeSnippet(snip3, IPersistence.DB_DEFAULT);
		snip3.id = snipId3;

		StringBuilder builder = new StringBuilder("/* test code in java */\n");
		builder.append("public class Test {\n\tpublic static void main() {\n");
		builder.append("\tfor(int i = 0; i < 10; ++i) ");
		builder.append("{\n\t\tSystem.out.println(\"Number = \" + i);\n\t}\n}\n");

		List<Code> codes = new ArrayList<Code>();
		codes.add(helper.createCode(1L, "/* test code incomplete */\n", "_test_java", snip1.getHashId(), 1, null));
		codes.add(helper.createCode(2L, builder.toString(), "_test_java", snip1.getHashId(), 2, null));
		codes.add(helper.createCode(3L, "/* test code to snippet 2 */", "_test_java", snip2.getHashId(), 0, null));
		codes.add(helper.createCode(4L, "/* test code to snippet 3 */", "_test_java", snip3.getHashId(), 7, null));
		instance.writeCode(codes, IPersistence.DB_DEFAULT);
		
		Notification notif = helper.createNotification(1L, user1.getUsername(), "a test notification",
				false, "now", "source is unknown", snip1.getHashId());
		instance.writeNotification(notif, IPersistence.DB_DEFAULT);

		List<Comment> comments = new ArrayList<Comment>();
		comments.add(helper.createComment(user2.getUsername(), snipId1, "first comment to user1's snippet", 1L, new Date(), 0, 0));
		comments.add(helper.createComment(user3.getUsername(), snipId1, "second comment to user1's snippet", 2L, new Date(), 0, 0));
		comments.add(helper.createComment(user1.getUsername(), snipId2, "third comment to user1's snippet", 3L, new Date(), 0, 0));
		comments.add(helper.createComment(user1.getUsername(), snipId3, "fourth comment to user2's snippet", 4L, new Date(), 0, 0));
		Comment comm1 = helper.createComment(user2.getUsername(), snipId2, "some comments with no message", 5L, new Date(), 0, 0);
		Comment comm2 = helper.createComment(user3.getUsername(), snipId2, "one more comment with no message", 6L, new Date(), 0, 0);
		comments.add(comm1);
		comments.add(comm2);
		instance.writeComment(comments, IPersistence.DB_DEFAULT);

		instance.addFavourite(snip3, user1, IPersistence.DB_DEFAULT);

		instance.writeRating(3, snip2, user3, IPersistence.DB_DEFAULT);
		instance.writeRating(1, snip2, user1, IPersistence.DB_DEFAULT);

		instance.votePositive(user1, comm1, IPersistence.DB_DEFAULT);
		instance.voteNegative(user2, comm1, IPersistence.DB_DEFAULT);
		instance.voteNegative(user3, comm1, IPersistence.DB_DEFAULT);
		instance.votePositive(user1, comm2, IPersistence.DB_DEFAULT);
		instance.votePositive(user2, comm2, IPersistence.DB_DEFAULT);
		instance.votePositive(user3, comm2, IPersistence.DB_DEFAULT);
		
		test_snip1 = snip1;
		test_snip2 = snip2;
	}

	/**
	 * tear down the database connection after unit tests
	 * 
	 * @throws java.lang.Exception
	 */
	@AfterClass
	public static void tearDownAfterClass() throws Exception {
		PersistenceFactory.closeFactory();
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeUser(org.smartsnip.core.User, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteUserUserInt() throws Throwable {
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeUser(java.util.List, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteUserListOfUserInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writePassword(org.smartsnip.core.User, java.lang.String, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWritePassword() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeLogin(org.smartsnip.core.User, java.lang.String, java.lang.Boolean, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteLogin() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeSnippet(org.smartsnip.core.Snippet, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteSnippetSnippetInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeSnippet(java.util.List, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteSnippetListOfSnippetInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeComment(org.smartsnip.core.Comment, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteCommentCommentInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeComment(java.util.List, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteCommentListOfCommentInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeTag(org.smartsnip.core.Tag, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteTagTagInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeTag(java.util.List, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteTagListOfTagInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeNotification(org.smartsnip.core.Notification, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteNotificationNotificationInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeNotification(java.util.List, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteNotificationListOfNotificationInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeCode(org.smartsnip.core.Code, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteCodeCodeInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeCode(java.util.List, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteCodeListOfCodeInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeCategory(org.smartsnip.core.Category, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteCategoryCategoryInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeCategory(java.util.List, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteCategoryListOfCategoryInt() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeLanguage(java.lang.String, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteLanguage() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeLicense(java.lang.String, java.lang.String, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Test
	public void testWriteLicense() throws Throwable {
		instance.writeLicense(
				"_test_license",
				"This is a test license file. It is generated by the SqlPersistence unit test",
				IPersistence.DB_DEFAULT);
		// TODO
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeRating(java.lang.Integer, org.smartsnip.core.Snippet, org.smartsnip.core.User, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteRating() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#unRate(org.smartsnip.core.User, org.smartsnip.core.Snippet, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testUnRate() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#writeVote(java.lang.Integer, org.smartsnip.core.Comment, org.smartsnip.core.User, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testWriteVote() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#votePositive(org.smartsnip.core.User, org.smartsnip.core.Comment, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testVotePositive() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#voteNegative(org.smartsnip.core.User, org.smartsnip.core.Comment, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testVoteNegative() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#unVote(org.smartsnip.core.User, org.smartsnip.core.Comment, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testUnVote() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#addFavourite(org.smartsnip.core.Snippet, org.smartsnip.core.User, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testAddFavourite() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeFavourite(org.smartsnip.core.Snippet, org.smartsnip.core.User, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveFavourite() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeUser(org.smartsnip.core.User, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveUser() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeLogin(org.smartsnip.core.User, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveLogin() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeSnippet(org.smartsnip.core.Snippet, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveSnippet() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeComment(org.smartsnip.core.Comment, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveComment() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeTag(org.smartsnip.core.Tag, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveTag() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeNotification(org.smartsnip.core.Notification, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveNotification() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeCode(org.smartsnip.core.Code, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveCode() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeCategory(org.smartsnip.core.Category, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveCategory() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeLanguage(java.lang.String, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveLanguage() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#removeLicense(java.lang.String, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testRemoveLicense() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getUser(java.lang.String)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetUser() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getUserByEmail(java.lang.String)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetUserByEmail() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getPassword(org.smartsnip.core.User)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetPassword() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#verifyPassword(org.smartsnip.core.User, java.lang.String)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Test
	public void testVerifyPassword() throws Throwable {
		// user 1, login granted - send unencoded password
		User user1 = instance.getUser("_test_user_1");
		assertFalse("Login of user1 must fail",
				instance.verifyPassword(user1, "_test_pass"));

		// user 2, login denied
		User user2 = instance.getUser("_test_user_2");
		assertFalse("Login of user2 not encrypted",
				instance.verifyPassword(user2, MD5.md5("_test_login")));

		// user 3, login granted
		User user3 = instance.getUser("_test_user_3");
		assertTrue("Login of user3 failed",
				instance.verifyPassword(user3, MD5.md5("_test_code")));
		assertFalse("Login of user3 must fail with wrong password",
				instance.verifyPassword(user3, MD5.md5("test_code")));
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#isLoginGranted(org.smartsnip.core.User)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testIsLoginGranted() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#findUser(java.lang.String)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testFindUser() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getUserSnippets(org.smartsnip.core.User)}
	 * .
	 * 
	 * @throws Throwable
	 * @throws Throwable
	 */
	@Ignore
	public void testGetUserSnippets() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getFavorited(org.smartsnip.core.User)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetFavorited() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getSnippets(java.util.List)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetSnippetsListOfTag() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getSnippets(org.smartsnip.core.Category)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetSnippetsCategory() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getSnippets(org.smartsnip.core.Category, java.lang.Integer, java.lang.Integer)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetSnippetsCategoryIntegerInteger() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getSnippet(java.lang.Long)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetSnippet() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getComment(java.lang.Long)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetComment() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getComments(org.smartsnip.core.Snippet)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetComments() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getTags(org.smartsnip.core.Snippet)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetTags() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getAllTags(java.lang.Integer, java.lang.Integer)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetAllTags() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getNotifications(org.smartsnip.core.User, boolean)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetNotifications() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getCodes(org.smartsnip.core.Snippet)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetCodes() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getAllCategories()}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetAllCategories() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getCategory(org.smartsnip.core.Snippet)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetCategorySnippet() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getCategory(java.lang.String)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetCategoryString() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getParentCategory(org.smartsnip.core.Category)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetParentCategory() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getSubcategories(org.smartsnip.core.Category)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetSubcategories() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getAllLanguages()}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetAllLanguages() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getLicense(java.lang.String)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetLicense() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getRatings(org.smartsnip.core.Snippet)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetRatings() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getAverageRating(org.smartsnip.core.Snippet)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetAverageRating() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getVotes(org.smartsnip.core.Comment)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetVotes() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getVote(org.smartsnip.core.User, org.smartsnip.core.Comment)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetVote() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#search(java.lang.String, java.lang.Integer, java.lang.Integer, int)}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testSearch() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getUserCount()}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetUserCount() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getCategoryCount()}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetCategoryCount() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getSnippetsCount()}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetSnippetsCount() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

	/**
	 * Test method for
	 * {@link org.smartsnip.persistence.hibernate.SqlPersistenceImpl#getTagsCount()}
	 * .
	 * 
	 * @throws Throwable
	 */
	@Ignore
	public void testGetTagsCount() throws Throwable {
		fail("Not yet implemented");
		//TODO not implemented
	}

}
